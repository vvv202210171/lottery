<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxl.mq.admin.dao.IXxlMqMessageDao" >
	
	<resultMap id="XxlMqMessage" type="com.xxl.mq.client.message.XxlMqMessage" >
		<result column="id" property="id" />
		<result column="topic" property="topic" />
	    <result column="group" property="group" />
	    <result column="data" property="data" />
	    <result column="status" property="status" />
	    <result column="retryCount" property="retryCount" />
	    <result column="shardingId" property="shardingId" />
		<result column="timeout" property="timeout" />
		<result column="effectTime" property="effectTime" />
		<result column="addTime" property="addTime" />
		<result column="log" property="log" />
	</resultMap>

	<sql id="Base_Column_List">
		t.`id`,
		t.`topic`,
		t.`group`,
		t.`data`,
		t.`status`,
		t.`retryCount`,
		t.`shardingId`,
		t.`timeout`,
		t.`effectTime`,
		t.`addTime`,
		t.`log`
	</sql>
	
	<select id="pageList" parameterType="java.util.HashMap" resultMap="XxlMqMessage">
		SELECT <include refid="Base_Column_List" />
		FROM xxl_mq_message AS t
		<trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="topic != null and topic != ''">
				AND t.topic = #{topic}
			</if>
			<if test="status != null and status != ''">
				AND t.status = #{status}
			</if>
			<if test="addTimeStart != null">
				AND t.addTime <![CDATA[ >= ]]> #{addTimeStart}
			</if>
			<if test="addTimeEnd != null">
				AND t.addTime <![CDATA[ <= ]]> #{addTimeEnd}
			</if>
		</trim>
		ORDER BY t.id DESC
		LIMIT #{offset}, #{pagesize}
	</select>
	
	<select id="pageListCount" parameterType="java.util.HashMap" resultType="int">
		SELECT count(1)
		FROM xxl_mq_message AS t
		<trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="topic != null and topic != ''">
				AND t.topic = #{topic}
			</if>
			<if test="status != null and status != ''">
				AND t.status = #{status}
			</if>
			<if test="addTimeStart != null">
				AND t.addTime <![CDATA[ >= ]]> #{addTimeStart}
			</if>
			<if test="addTimeEnd != null">
				AND t.addTime <![CDATA[ <= ]]> #{addTimeEnd}
			</if>
		</trim>
	</select>

	<delete id="delete" parameterType="java.util.HashMap" >
		DELETE FROM xxl_mq_message
		WHERE id = #{id}
	</delete>

	<update id="update" parameterType="java.util.HashMap" >
		UPDATE xxl_mq_message AS t
		SET
			t.`group` = #{message.group},
			t.`data` = #{message.data},
			t.`status` = #{message.status},
			t.`retryCount` = #{message.retryCount},
			t.`shardingId` = #{message.shardingId},
			t.`timeout` = #{message.timeout},
			t.`effectTime` = #{message.effectTime},
			t.`log` = CONCAT(t.`log`, #{message.log})
		WHERE t.`id` = #{message.id}
	</update>

	<insert id="save" parameterType="com.xxl.mq.client.message.XxlMqMessage" useGeneratedKeys="true" keyProperty="id" >
		INSERT INTO xxl_mq_message (
			`topic`,
			`group`,
			`data`,
			`status`,
			`retryCount`,
			`shardingId`,
			`timeout`,
			`effectTime`,
			`addTime`,
			`log`
		) VALUES
		<foreach collection ="messageList" item="messageItem" index= "index" separator =",">
			(
				#{messageItem.topic},
				#{messageItem.group},
				#{messageItem.data},
				#{messageItem.status},
				#{messageItem.retryCount},
				#{messageItem.shardingId},
				#{messageItem.timeout},
				#{messageItem.effectTime},
				NOW(),
				#{messageItem.log}
			)
		</foreach >
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<select id="pullNewMessage" parameterType="java.util.HashMap" resultMap="XxlMqMessage">
		SELECT <include refid="Base_Column_List" />
		FROM xxl_mq_message AS t
		WHERE 	t.topic = #{topic}
			AND t.group = #{group}
			AND t.status = #{newStatus}
			AND t.effectTime <![CDATA[ < ]]> NOW()
			<if test="consumerTotal > 1">
				AND (
					(
						t.shardingId <![CDATA[ = ]]> 0
						AND
						MOD(t.id, #{consumerTotal}) = #{consumerRank}
					)
					OR
					(
						t.shardingId <![CDATA[ > ]]> 0
						AND
						MOD(t.shardingId, #{consumerTotal}) = #{consumerRank}
					)
				)
			</if>
		ORDER BY t.id ASC
		LIMIT #{pagesize}
	</select>

	<update id="lockMessage" parameterType="java.util.HashMap" >
		UPDATE xxl_mq_message AS t
		SET
			t.status = #{ingStatus},
			t.`log` = CONCAT(t.`log`, #{appendLog})
		WHERE id = #{id} AND t.status =  #{newStatus}
	</update>

	<update id="updateStatus" parameterType="java.util.HashMap" >
		UPDATE xxl_mq_message
		SET
			status =
				<foreach collection="messageList" item="messageItem" index="index" separator=" " open="case id" close="end">
					when #{messageItem.id} then #{messageItem.status}
				</foreach>
			,
			log =
				<foreach collection="messageList" item="messageItem" index="index" separator=" " open="case id" close="end">
					when #{messageItem.id} then CONCAT(log, #{messageItem.log})
				</foreach>
		WHERE id IN
			<foreach collection="messageList" item="messageItem"  index="index" separator="," open="(" close=")">
				#{messageItem.id}
			</foreach>
	</update>

	<update id="updateRetryCount" parameterType="java.util.HashMap" >
		UPDATE xxl_mq_message
		SET
			status = #{newStatus},
			retryCount = retryCount - 1 ,
			effectTime = DATE_ADD(NOW(), Interval 1 minute ),
			log = CONCAT(log, #{appendLog})
		WHERE status =  #{failStatus}
			AND retryCount <![CDATA[ > ]]> 0
	</update>

	<delete id="cleanSuccessMessage" >
		DELETE FROM xxl_mq_message
		WHERE status =  #{successStatus}
			AND addTime <![CDATA[ < ]]> DATE_SUB(NOW(), Interval #{logretentiondays} DAY)
	</delete>

	<select id="findNewTopicList" parameterType="java.util.HashMap" resultType="java.lang.String" >
		select distinct topic
		from xxl_mq_message
		where topic not in (
				select topic from xxl_mq_topic
			)
	</select>

	<select id="messageCountByDay" resultType="java.util.Map" >
		SELECT
			DATE_FORMAT(addTime,'%Y-%m-%d') messageDay,
			COUNT(id) as totalNum,
			SUM(CASE WHEN (status = 'NEW' ) then 1 else 0 end) as newNum,
			SUM(CASE WHEN (status = 'RUNNING' ) then 1 else 0 end) as ingNum,
			SUM(CASE WHEN (status = 'SUCCESS' ) then 1 else 0 end) as successNum,
			SUM(CASE WHEN (status = 'FAIL' ) then 1 else 0 end) as failNum
		FROM xxl_mq_message
		WHERE addTime BETWEEN #{startDate} and #{endDate}
		GROUP BY messageDay;
    </select>

    <delete id="clearMessage" >
        delete from xxl_mq_message
        where 1 = 1
			<if test="topic != null and topic != ''">
				AND topic = #{topic}
			</if>

            <if test="status != null and status != ''">
                AND `status` = #{status}
            </if>
            <if test="type == 1" >
                AND addTime <![CDATA[ <= ]]> DATE_SUB(NOW(), Interval 1 MONTH )
            </if>
            <if test="type == 2" >
                AND addTime <![CDATA[ <= ]]> DATE_SUB(NOW(), Interval 3 MONTH )
            </if>
            <if test="type == 3" >
                AND addTime <![CDATA[ <= ]]> DATE_SUB(NOW(), Interval 6 MONTH )
            </if>
            <if test="type == 4" >
                AND addTime <![CDATA[ <= ]]> DATE_SUB(NOW(), Interval 12 MONTH )
            </if>
            <if test="type == 5 or type == 6 or type == 7" >
                AND id NOT in(
                    SELECT id FROM(
                        SELECT t.id FROM xxl_mq_message AS t
                        where t.topic = #{topic}
                            <if test="status != null and status != ''">
                                AND t.status = #{status}
                            </if>
                        ORDER BY t.id desc
                        <if test="type == 5" >
                            LIMIT 1000
                        </if>
                        <if test="type == 6" >
                            LIMIT 10000
                        </if>
                        <if test="type == 7" >
                            LIMIT 100000
                        </if>
                    ) t1
                )
            </if>
            <!--
            <if test="type == 8" >
            </if>
            -->

    </delete>

	<delete id="resetBlockTimeoutMessage" parameterType="java.util.HashMap" >
		update xxl_mq_message
		set `status` = #{failStatus},
			log = CONCAT(log, #{appendLog})
		where `status` = #{ingStatus}
			AND NOW() <![CDATA[ > ]]> DATE_ADD( DATE_ADD(effectTime, Interval timeout SECOND) , Interval 1 hour )
	</delete>

</mapper>